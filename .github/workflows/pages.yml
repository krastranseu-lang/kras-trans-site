name: Deploy to GitHub Pages (Kras-Trans)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

# uprawnienia dla Pages (nowy model z id-token)
permissions:
  contents: read
  pages: write
  id-token: write

# jedna instancja na raz
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build static site
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # stałe projektu (możesz nadpisać przy kroku Build)
      SITE_URL: https://kras-trans.com
      DEFAULT_LANG: pl
      BRAND: "Kras-Trans"
      GA_ID: "G-5FYE42J3BE"
      GSC_VERIFICATION: "Q3XgXOegwnvV6sBj31MbGlldhfD2uzmHBnR6kvLFj7Y"
      CNAME: kras-trans.com
      APPS_URL: ${{ secrets.APPS_URL }}
      APPS_KEY: ${{ secrets.APPS_KEY }}

    steps:
      # ————————————————————————————————
      # 0) Repo
      # ————————————————————————————————
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Show commit info
        run: |
          echo "SHA: $GITHUB_SHA"
          echo "Actor: $GITHUB_ACTOR"
          echo "Ref: $GITHUB_REF"

      # ————————————————————————————————
      # 1) Narzędzia systemowe
      # ————————————————————————————————
      - name: Install jq + zip + tree
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip tree

      # ————————————————————————————————
      # 2) Wstępna walidacja sekretów (czy nie puste)
      # ————————————————————————————————
      - name: Preflight secrets check
        if: env.APPS_URL != '' && env.APPS_KEY != ''
        run: |
          set -euo pipefail
          test -n "${APPS_URL:-}" || { echo "::error::Missing secret APPS_URL"; exit 1; }
          test -n "${APPS_KEY:-}" || { echo "::error::Missing secret APPS_KEY"; exit 1; }
          echo "APPS_URL/KEY present ✓"

      # ————————————————————————————————
      # 3) Pobranie CMS z Apps Script (odporne)
      # ————————————————————————————————
      - name: Fetch CMS JSON from Apps Script (robust)
        if: env.APPS_URL != '' && env.APPS_KEY != ''
        run: |
          set -euo pipefail
          mkdir -p data

          # mała walidacja formatu URL (informacyjnie)
          echo "$APPS_URL" | grep -Eq '^https://script\.google\.com/macros/s/.+/(exec|dev)$' || {
            echo "::warning::APPS_URL nie wygląda na /exec ani /dev Web App — sprawdź w Apps Script › Deployments."
          }

          ATTEMPTS=5
          i=1
          while [ $i -le $ATTEMPTS ]; do
            echo "Attempt $i/$ATTEMPTS…"
            HTTP_CODE=$(curl --silent --show-error --location \
              --retry 5 --retry-delay 2 --retry-all-errors \
              --connect-timeout 20 --max-time 60 \
              --write-out "%{http_code}" \
              --output data/cms.json \
              "$APPS_URL?key=$APPS_KEY" || true)

            if [ "$HTTP_CODE" = "200" ] && jq -e '.ok==true and (.pages|type=="array")' data/cms.json >/dev/null 2>&1; then
              echo "CMS OK ✓"
              break
            fi

            echo "HTTP=$HTTP_CODE"; echo "Head of response:"; head -c 600 data/cms.json || true; echo
            sleep $((2*i))
            i=$((i+1))
          done

          test -s data/cms.json || { echo "::error::CMS JSON missing/empty"; exit 1; }
          jq -e '.ok==true' data/cms.json >/dev/null || { echo "::error::CMS .ok != true"; cat data/cms.json; exit 1; }

          echo "Updated: $(jq -r '.updated // "n/a"' data/cms.json)"
          echo "Pages:   $(jq -r '.pages | length' data/cms.json)"

      # ————————————————————————————————
      # 4) Zapis kopii cms.json jako artefakt
      # ————————————————————————————————
      - name: Keep a copy of cms.json (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: cms.json
          path: data/cms.json
          if-no-files-found: error
          retention-days: 7

      # ————————————————————————————————
      # 5) Python + cache pip
      # ————————————————————————————————
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install build deps (requirements.txt)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # awaryjnie — minimalny zestaw
            pip install Jinja2>=3.1 Markdown>=3.6 python-slugify requests beautifulsoup4 lxml
          fi
          python -c "import jinja2, markdown, bs4, lxml, slugify, requests; print('Python deps OK ✓')"

      # ————————————————————————————————
      # 6) Sanity check — szablony Jinja
      # ————————————————————————————————
      - name: Sanity check (templates compile)
        run: |
          python - <<'PY'
          from jinja2 import Environment, FileSystemLoader
          import os, sys
          env = Environment(loader=FileSystemLoader("templates"))
          # lista priorytetowych — reszta może być fallbackiem na page.html
          must = ["page.html"]
          optional = [
              "blog_index.html","blog_post.html",
              "case_index.html","case_item.html",
              "reviews.html","location.html",
              "jobs_index.html","job_item.html"
          ]
          for t in must:
              env.get_template(t)
          for t in optional:
              try: env.get_template(t)
              except: pass
          print("Templates OK ✓")
          PY

      # ————————————————————————————————
      # 7) Build
      # ————————————————————————————————
      - name: Build site (HTML + sitemap/robots + ZIP)
        env:
          SITE_URL: ${{ env.SITE_URL }}
          DEFAULT_LANG: ${{ env.DEFAULT_LANG }}
          BRAND: ${{ env.BRAND }}
          GA_ID: ${{ env.GA_ID }}
          GSC_VERIFICATION: ${{ env.GSC_VERIFICATION }}
          CNAME: ${{ env.CNAME }}
        run: |
          set -euo pipefail
          python -u tools/build.py
          echo "Built tree:"
          tree -a dist | sed -e 's/^/  /'

      # ————————————————————————————————
      # 8) Smoke-test dist (pl/home, sitemap, robots)
      # ————————————————————————————————
      - name: Smoke test dist
        run: |
          set -e
          test -f dist/sitemap.xml || { echo "::error::Missing dist/sitemap.xml"; exit 1; }
          test -f dist/robots.txt  || { echo "::error::Missing dist/robots.txt";  exit 1; }
          # Home po polsku (root redirect generujemy jako /index.html → /pl/)
          test -f dist/pl/index.html || { echo "::error::Missing dist/pl/index.html (home)"; exit 1; }
          echo "Smoke tests OK ✓"

      # ————————————————————————————————
      # 9) Snapshot ZIP + dodatkowe artefakty
      # ————————————————————————————————
      - name: Upload site snapshot (ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: site-snapshot
          path: dist/download/site.zip
          if-no-files-found: warn
          retention-days: 7

      # ————————————————————————————————
      # 10) Artefakt do Pages
      # ————————————————————————————————
      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Configure Pages (ustawia środowisko i token OIDC)
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # Publikacja artefaktu z joba build
      - id: deployment
        name: Deploy
        uses: actions/deploy-pages@v4
