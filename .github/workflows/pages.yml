name: pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    # Upewnij się, że etykiety pasują do runnera (Settings → Actions → Runners)
    runs-on: [ self-hosted, macOS ]
    timeout-minutes: 30

    env:
      SITE_URL:             ${{ vars.SITE_URL }}
      GA_ID:                ${{ vars.GA_ID }}
      GSC_VERIFICATION:     ${{ vars.GSC_VERIFICATION }}
      INDEXNOW_KEY:         ${{ vars.INDEXNOW_KEY }}
      BING_SITE_AUTH_USER:  ${{ vars.BING_SITE_AUTH_USER }}
      NEWS_ENABLED:         ${{ vars.NEWS_ENABLED }}
      BUILD_ID:             ${{ github.run_id }}
      BUILD_NUM:            ${{ github.run_number }}
      LOCAL_XLSX:           ${{ vars.LOCAL_XLSX }}   # absolutna ścieżka na Twoim Macu (opcjonalnie)

    steps:
      # ---------- Przygotowanie macOS (brew, PATH, narzędzia) ----------
      - name: Prepare macOS runner
        shell: bash
        run: |
          set -euo pipefail
          ARCH="$(uname -m)"   # arm64 lub x86_64

          if [ -x /opt/homebrew/bin/brew ]; then
            BREW=/opt/homebrew/bin/brew
            eval "$($BREW shellenv)"
            export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"
          elif [ -x /usr/local/bin/brew ]; then
            BREW=/usr/local/bin/brew
            eval "$($BREW shellenv)"
            export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
          else
            echo "::warning::Homebrew not found. If you need extra tools, install brew manually."
            BREW=""
          fi

          if [ -n "${BREW}" ]; then
            if [ "${ARCH}" = "arm64" ]; then
              arch -arm64 ${BREW} update || true
              arch -arm64 ${BREW} install jq tree gnu-sed zip coreutils python@3 git-lfs || true
            else
              ${BREW} update || true
              ${BREW} install jq tree gnu-sed zip coreutils python@3 git-lfs || true
            fi
            git lfs install || true
          fi

          echo "PATH=$PATH"
          git --version || true
          which jq || true
          which gsed || true
          python3 -V || true

      # ---------- Checkout (bez LFS, aby nie żądał git-lfs) ----------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: false

      - name: Show commit info
        shell: bash
        run: |
          set -euo pipefail
          echo "repo:  $GITHUB_REPOSITORY"
          echo "sha:   $GITHUB_SHA"
          echo "actor: $GITHUB_ACTOR"

      # ---------- Opcjonalnie: kopiuj lokalny XLSX z Maca ----------
      - name: Copy local XLSX if provided
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data
          if [ -n "${LOCAL_XLSX:-}" ] && [ -f "${LOCAL_XLSX}" ]; then
            echo "Using LOCAL_XLSX: ${LOCAL_XLSX}"
            cp -f "${LOCAL_XLSX}" data/cms.xlsx
          else
            echo "::notice::LOCAL_XLSX not set or file missing - expecting data/cms.xlsx in repo/workspace."
          fi

      - name: Check XLSX presence
        shell: bash
        run: |
          set -euo pipefail
          test -f data/cms.xlsx && echo "cms.xlsx OK" || { echo "Missing data/cms.xlsx"; exit 1; }

      # ---------- Python deps ----------
      - name: Install Python deps
        shell: bash
        run: |
          set -euo pipefail
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt
          python3 -m pip install openpyxl unidecode

      # ---------- Generuj NAV z XLSX ----------
      - name: Generate static NAV from XLSX
        shell: bash
        run: |
          set -euo pipefail
          python3 tools/generate_nav_from_xlsx.py
          echo "NAV bundles:"
          ls -lah assets/nav || true

      - name: Upload NAV bundles (artifact, debug)
        uses: actions/upload-artifact@v4
        with:
          name: nav-bundles
          path: assets/nav/*.json
          if-no-files-found: warn
          retention-days: 3

      # ---------- Sanity (Jinja) ----------
      - name: Sanity check (templates compile)
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          from jinja2 import Environment, FileSystemLoader
          env = Environment(loader=FileSystemLoader('templates'))
          env.get_template('base.html')
          env.get_template('page.html')
          print("Templates OK")
          PY

      # ---------- Build ----------
      - name: Build site (HTML + sitemaps/robots)
        shell: bash
        env:
          SITE_URL:             ${{ env.SITE_URL }}
          GA_ID:                ${{ env.GA_ID }}
          GSC_VERIFICATION:     ${{ env.GSC_VERIFICATION }}
          INDEXNOW_KEY:         ${{ env.INDEXNOW_KEY }}
          BING_SITE_AUTH_USER:  ${{ env.BING_SITE_AUTH_USER }}
          NEWS_ENABLED:         ${{ env.NEWS_ENABLED }}
        run: |
          set -euo pipefail
          python3 -u tools/build.py
          test -d dist || { echo "dist/ missing"; exit 1; }
          stat dist/index.html || { echo "index.html missing"; exit 1; }
          tree -L 2 dist | sed -n '1,150p' || true

      # ---------- Cache-bust ----------
      - name: Cache-bust static assets (CSS/JS) in built HTML
        shell: bash
        env:
          BUST: ${{ github.run_number }}-${{ github.run_id }}
        run: |
          set -euo pipefail
          ASSETS=("/assets/js/site.js" "/assets/js/cms.js" "/assets/css/site.css")
          for P in "${ASSETS[@]}"; do
            grep -RIl --include="*.html" -- "$P" dist | while read -r f; do
              gsed -i -E "s#(${P})(\\?[^\"']*)?([\"'])#\\1?v=${BUST}\\3#g" "$f" 2>/dev/null \
              || sed -i '' -E "s#(${P})(\\?[^\"']*)?([\"'])#\\1?v=${BUST}\\3#g" "$f"
            done
          done
          echo "Preview (busted):"
          grep -R --include="*.html" -nE "/assets/(css|js)/(site|cms)\\.(css|js)\\?v=" dist | head -n 20 || true

      # ---------- ZIP, artifact Pages ----------
      - name: Make site snapshot (ZIP)
        shell: bash
        run: |
          set -euo pipefail
          (cd dist && zip -q -r ../dist.zip .)
          ls -lah dist.zip

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist
          if-no-files-found: error

  deploy:
    needs: build
    runs-on: [ self-hosted, macOS ]
    timeout-minutes: 15
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
