name: pages
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build site (self-hosted)
    runs-on: [self-hosted, macOS, X64]

    steps:
      - uses: actions/checkout@v4

      - name: Create local venv (python3) & install libs
        run: |
          set -e
          python3 -V
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install --upgrade openpyxl beautifulsoup4 PyYAML pytest
          python -c 'import openpyxl, bs4, yaml, pytest; print("✅ libs OK")'

      - name: Cache Playwright browsers
        if: ${{ hashFiles('tests/**') != '' }}
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ms-playwright
          key: ${{ runner.os }}-pw-${{ hashFiles('**/requirements.txt') }}

      - name: Install Playwright (browser)
        if: ${{ hashFiles('tests/**') != '' }}
        run: |
          source .venv/bin/activate
          pip install --upgrade playwright
          python -m playwright install --with-deps chromium

      - name: Run tests
        if: ${{ hashFiles('tests/**') != '' }}
        run: |
          source .venv/bin/activate
          pytest -q

      # Jeśli chcesz tymczasowo ominąć test z Playwright:
      # run: |
      #   source .venv/bin/activate
      #   pytest -q -k 'not dropdown_keyboard'

      - name: Provide CMS from runner
        run: |
          set -e
          mkdir -p data/cms
          SRC="${{ vars.CMS_SOURCE }}"
          [ -z "$SRC" ] && SRC="${{ vars.LOCAL_XLSX }}"   # opcjonalny fallback; jeśli nie używasz, usuń tę linię
          [ -z "$SRC" ] && SRC="/Users/illia/Desktop/Kras_transStrona/CMS.xlsx"
          SRC="$(echo "$SRC" | sed 's/[[:space:]\.]*$//')"   # obetnij spacje/kropki z końca
          echo "CMS_SOURCE_PATH: $SRC"
          if [ -f "$SRC" ]; then
            cp "$SRC" data/cms/menu.xlsx
          else
            echo "⚠️ CMS not found at: $SRC; creating empty placeholder"
            touch data/cms/menu.xlsx
          fi
          echo "CMS_SHA256: $(shasum -a 256 data/cms/menu.xlsx | awk '{print $1}' || true)"
          ls -lah data/cms

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: CMS Schema Guard
        run: |
          set -e
          source .venv/bin/activate
          python tools/cms_guard.py .codex/cms_schema.yml data/cms/menu.xlsx

      - name: Upload CMS sheet report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: cms-sheets
          path: |
            sheet_report.json
            data/cms/menu.xlsx
          if-no-files-found: warn

      - name: Build
        env:
          CLEAN: '1'
          MINIFY: '1'
        run: |
          set -e
          source .venv/bin/activate
          python tools/build.py

      # Fallback: jeśli build nie zapisał _routes.json, zeskanuj dist i utwórz go tu (bez heredoca)
      - name: Export routes from dist (fallback)
        run: |
          set -e
          python -c "from pathlib import Path; import json; items=[{'out':str(p)} for p in Path('dist').rglob('index.html')]; Path('_routes.json').write_text(json.dumps(items, ensure_ascii=False, indent=2), encoding='utf-8'); print(f'[routes] exported from dist, count={len(items)}')"

      - name: Verify build
        run: |
          set -e
          source .venv/bin/activate
          python tools/cms_verify_build.py

      - name: Upload routes diag
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: routes-json
          path: _routes.json
          if-no-files-found: warn

      - name: List bundles
        run: |
          echo "--- dist/assets/data/menu ---"; ls -lah dist/assets/data/menu || true
          echo "--- dist/assets/nav (legacy) ---"; ls -lah dist/assets/nav || true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
